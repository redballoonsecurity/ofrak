name: Build OFRAK Wheels

# Trigger on push to feature/windows_tests branch
on:
  push:
    branches:
       - master
#      - feature/windows_tests
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build OFRAK wheels on ${{ matrix.os }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build frontend
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            npm install
            npm run build
            cd ../ofrak_core
            cp -r ../frontend/dist ofrak/gui/public
          else
            echo "No frontend directory found, creating empty public directory"
            mkdir -p ofrak_core/ofrak/gui/public
          fi
        shell: bash

      - name: Install build tools  
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel

      - name: Set Python version for cibuildwheel
        id: py-version  
        run: |
          PY_VERSION="${{ matrix.python-version }}"
          PY_VERSION_NO_DOT=${PY_VERSION//./}
          echo "version=${PY_VERSION_NO_DOT}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build OFRAK wheels with cibuildwheel
        env:
          CIBW_BUILD: "cp${{ steps.py-version.outputs.version }}-*"
          CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux*"  # Skip 32-bit and musl
          CIBW_ARCHS_WINDOWS: "AMD64 ARM64"  # Windows x64 and ARM64
          CIBW_ARCHS_MACOS: "x86_64 arm64"   # Intel and Apple Silicon
          CIBW_ARCHS_LINUX: "x86_64 aarch64" # Intel and ARM64
          CIBW_BUILD_VERBOSITY: 1
          # Ensure C compiler is available
          CIBW_BEFORE_BUILD_WINDOWS: "pip install setuptools wheel"
          CIBW_BEFORE_BUILD_MACOS: "pip install setuptools wheel" 
          CIBW_BEFORE_BUILD_LINUX: "pip install setuptools wheel"
        run: |
          cd ofrak_core
          cibuildwheel --output-dir ../wheelhouse
        shell: bash

      - name: List built wheels
        run: |
          echo "Built wheels:"
          ls -la wheelhouse/ || echo "No wheelhouse found"
        shell: bash

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ofrak-${{ matrix.os }}-py${{ matrix.python-version }}
          path: wheelhouse/
          retention-days: 30

  build_sdist:
    name: Build source distributions
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build OFRAK source distribution
        run: |
          mkdir -p sdist
          cd ofrak_core
          python -m build --sdist --outdir ../sdist
          cd ..

      - name: List built sdists
        run: |
          echo "Built source distributions:"
          ls -la sdist/

      - name: Upload source distributions
        uses: actions/upload-artifact@v4
        with:
          name: source-distributions
          path: sdist/
          retention-days: 30
