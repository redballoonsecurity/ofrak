name: Build and test ofrak packages

on:
  pull_request:
    paths:
      - 'ofrak_type/**'
      - 'ofrak_io/**'
      - 'ofrak_patch_maker/**'
      - 'pytest_ofrak/**'
      - 'ofrak_core/**'
      - 'frontend/**'
      - 'disassemblers/ofrak_angr/**'
      - '.github/workflows/ofrak-type-ci.yml'
  push:
    branches:
      - feature/windows_tests
      # TODO: Consider adding paths/branches here as well
  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    shell: bash -euxo pipefail {0}  # NOTE: On Windows, this uses Git Bash which provides Unix compatibility (for example for ofrak-io's StreamCapture

jobs:
  build-ofrak-type-sdist:
    name: build ofrak-type sdist
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install -r pip-requirements.txt
          pip install build

      - name: Build ofrak-type source distribution
        run: |
          cd ofrak_type
          python -m build --sdist --outdir ../dist-ofrak-type

      - name: List built packages
        run: |
          echo "Built OFRAK Type packages:"
          ls -la dist-ofrak-type/

      - name: Upload source distribution
        uses: actions/upload-artifact@v4
        with:
          name: ofrak-type-sdist
          path: dist-ofrak-type/
          retention-days: 30

  test-ofrak-type:
    name: Test ofrak-type on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: build-ofrak-type-sdist
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download source distribution
        uses: actions/download-artifact@v4
        with:
          name: ofrak-type-sdist
          path: dist-ofrak-type/

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Create virtual environment
        run: |
          python -m venv venv
        
      - name: Activate virtual environment (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          
      - name: Activate virtual environment (Windows)
        if: runner.os == 'Windows'
        run: |
          venv\Scripts\activate
          echo "VIRTUAL_ENV=$env:VIRTUAL_ENV" >> $env:GITHUB_ENV
          echo "$env:VIRTUAL_ENV\Scripts" >> $env:GITHUB_PATH
        shell: pwsh

      - name: Install pinned pip version
        run: |
          python -m pip install -r pip-requirements.txt

      - name: Install development requirements
        run: |
          pip install -r dev-requirements.txt

      - name: Install OFRAK Type from sdist
        run: |
          pip install dist-ofrak-type/*.tar.gz

      - name: Run tests (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd ofrak_type
          make test

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: |
          cd ofrak_type
          make test PYTHON=python

  build-ofrak-io-sdist:
    name: build ofrak-io sdist
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install -r pip-requirements.txt
          pip install build

      - name: Build OFRAK IO source distribution
        run: |
          cd ofrak_io
          python -m build --sdist --outdir ../dist-io

      - name: List built packages
        run: |
          echo "Built OFRAK IO packages:"
          ls -la dist-io/

      - name: Upload OFRAK IO source distribution
        uses: actions/upload-artifact@v4
        with:
          name: ofrak-io-sdist
          path: dist-io/
          retention-days: 30

  test-ofrak-io:
    name: Test OFRAK IO on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: [build-ofrak-type-sdist, build-ofrak-io-sdist]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download ofrak_type source distribution
        uses: actions/download-artifact@v4
        with:
          name: ofrak-type-sdist
          path: dist-ofrak-type/

      - name: Download ofrak_io source distribution
        uses: actions/download-artifact@v4
        with:
          name: ofrak-io-sdist
          path: dist-io/

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Create virtual environment
        run: |
          python -m venv venv
        
      - name: Activate virtual environment (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          
      - name: Activate virtual environment (Windows)
        if: runner.os == 'Windows'
        run: |
          venv\Scripts\activate
          echo "VIRTUAL_ENV=$env:VIRTUAL_ENV" >> $env:GITHUB_ENV
          echo "$env:VIRTUAL_ENV\Scripts" >> $env:GITHUB_PATH
        shell: pwsh

      - name: Install pinned pip version
        run: |
          python -m pip install -r pip-requirements.txt

      - name: Install development requirements
        run: |
          pip install -r dev-requirements.txt

      - name: Install ofrak_type from sdist
        run: |
          pip install dist-ofrak-type/*.tar.gz

      - name: Install OFRAK IO from sdist
        run: |
          pip install dist-io/*.tar.gz

      - name: Run OFRAK IO tests (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd ofrak_io
          make test

      - name: Run OFRAK IO tests (Windows)
        if: runner.os == 'Windows'
        run: |
          cd ofrak_io
          make test PYTHON=python

  build-ofrak-patch-maker-sdist:
    name: build ofrak-patch-maker sdist
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install -r pip-requirements.txt
          pip install build

      - name: Build OFRAK Patch Maker source distribution
        run: |
          cd ofrak_patch_maker
          python -m build --sdist --outdir ../dist-patch-maker

      - name: List built packages
        run: |
          echo "Built OFRAK Patch Maker packages:"
          ls -la dist-patch-maker/

      - name: Upload OFRAK Patch Maker source distribution
        uses: actions/upload-artifact@v4
        with:
          name: ofrak-patch-maker-sdist
          path: dist-patch-maker/
          retention-days: 30

  build-pytest-ofrak-sdist:
    name: build pytest-ofrak sdist
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install -r pip-requirements.txt
          pip install build

      - name: Build pytest-ofrak source distribution
        run: |
          cd pytest_ofrak
          python -m build --sdist --outdir ../dist-pytest-ofrak

      - name: List built packages
        run: |
          echo "Built pytest-ofrak packages:"
          ls -la dist-pytest-ofrak/

      - name: Upload pytest-ofrak source distribution
        uses: actions/upload-artifact@v4
        with:
          name: pytest-ofrak-sdist
          path: dist-pytest-ofrak/
          retention-days: 30

  test-ofrak-patch-maker:
    name: Test OFRAK Patch Maker on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: [build-ofrak-type-sdist, build-ofrak-patch-maker-sdist]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download ofrak_type source distribution
        uses: actions/download-artifact@v4
        with:
          name: ofrak-type-sdist
          path: dist-ofrak-type/

      - name: Download ofrak_patch_maker source distribution
        uses: actions/download-artifact@v4
        with:
          name: ofrak-patch-maker-sdist
          path: dist-patch-maker/

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Create virtual environment
        run: |
          python -m venv venv
        
      - name: Activate virtual environment (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          
      - name: Activate virtual environment (Windows)
        if: runner.os == 'Windows'
        run: |
          venv\Scripts\activate
          echo "VIRTUAL_ENV=$env:VIRTUAL_ENV" >> $env:GITHUB_ENV
          echo "$env:VIRTUAL_ENV\Scripts" >> $env:GITHUB_PATH
        shell: pwsh

      - name: Install pinned pip version
        run: |
          python -m pip install -r pip-requirements.txt

      - name: Install development requirements
        run: |
          pip install -r dev-requirements.txt

      - name: Install ofrak_type from sdist
        run: |
          pip install dist-ofrak-type/*.tar.gz

      - name: Install OFRAK Patch Maker from sdist
        run: |
          pip install dist-patch-maker/*.tar.gz

      - name: Run OFRAK Patch Maker tests (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd ofrak_patch_maker
          make test

      - name: Run OFRAK Patch Maker tests (Windows)
        if: runner.os == 'Windows'
        run: |
          cd ofrak_patch_maker
          make test PYTHON=python

  build-ofrak-wheels:
    name: Build OFRAK wheels on ${{ matrix.os }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true


      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build frontend
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            npm install
            npm run build
            cd ../ofrak_core
            cp -r ../frontend/dist src/ofrak/gui/public
          else
            echo "No frontend directory found, creating empty public directory"
            mkdir -p ofrak_core/src/ofrak/gui/public
          fi

      - name: Install build tools
        run: |
          python -m pip install -r pip-requirements.txt
          pip install cibuildwheel

      - name: Set Python version for cibuildwheel
        id: py-version
        run: |
          PY_VERSION="${{ matrix.python-version }}"
          PY_VERSION_NO_DOT=${PY_VERSION//./}
          echo "version=${PY_VERSION_NO_DOT}" >> $GITHUB_OUTPUT

      - name: Build OFRAK wheels with cibuildwheel
        env:
          CIBW_BUILD: "cp${{ steps.py-version.outputs.version }}-*"
          CIBW_SKIP: "*-win32 *-manylinux_i686"
          CIBW_ARCHS_WINDOWS: "AMD64"  # Simplified for now
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_LINUX: "x86_64"  # Simplified for now
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_BUILD: "pip install setuptools wheel"
        run: |
          cd ofrak_core
          cibuildwheel --output-dir ../wheelhouse

      - name: List built wheels
        run: |
          echo "Built OFRAK wheels:"
          ls -la wheelhouse/ || echo "No wheelhouse found"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ofrak-wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: wheelhouse/
          retention-days: 30

  test-ofrak-wheels:
    name: Test ofrak wheels on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: [build-ofrak-type-sdist, build-ofrak-io-sdist, build-ofrak-patch-maker-sdist, build-ofrak-wheels, build-pytest-ofrak-sdist]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Download OFRAK wheels
        uses: actions/download-artifact@v4
        with:
          name: ofrak-wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: wheelhouse/

      - name: Download ofrak_type source distribution
        uses: actions/download-artifact@v4
        with:
          name: ofrak-type-sdist
          path: dist-ofrak-type/

      - name: Download ofrak_io source distribution
        uses: actions/download-artifact@v4
        with:
          name: ofrak-io-sdist
          path: dist-io/

      - name: Download ofrak_patch_maker source distribution
        uses: actions/download-artifact@v4
        with:
          name: ofrak-patch-maker-sdist
          path: dist-patch-maker/

      - name: Download pytest_ofrak source distribution
        uses: actions/download-artifact@v4
        with:
          name: pytest-ofrak-sdist
          path: dist-pytest-ofrak/

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Create virtual environment
        run: |
          python -m venv venv
        
      - name: Activate virtual environment (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          
      - name: Activate virtual environment (Windows)
        if: runner.os == 'Windows'
        run: |
          venv\Scripts\activate
          echo "VIRTUAL_ENV=$env:VIRTUAL_ENV" >> $env:GITHUB_ENV
          echo "$env:VIRTUAL_ENV\Scripts" >> $env:GITHUB_PATH
        shell: pwsh

      - name: Install pinned pip version
        run: |
          python -m pip install -r pip-requirements.txt

      - name: Install development requirements
        run: |
          pip install -r dev-requirements.txt

      - name: Install our specific dependency sdists first
        run: |
          pip install dist-ofrak-type/*.tar.gz
          pip install dist-io/*.tar.gz
          pip install dist-patch-maker/*.tar.gz

      - name: List available OFRAK wheels
        run: |
          echo "Available wheels in wheelhouse/:"
          ls -la wheelhouse/
          echo ""
          echo "Platform info:"
          python -c "import sysconfig; print(f'Platform: {sysconfig.get_platform()}')"
          python -c "import platform; print(f'Machine: {platform.machine()}')"

      - name: Determine which wheel to install
        run: |
          echo "Contents of wheelhouse:"
          ls -la wheelhouse/
          echo ""
          echo "Testing which wheel pip would choose (local only):"
          WHEEL_PATH=$(pip install --dry-run --find-links wheelhouse/ --no-index --no-deps ofrak 2>&1 | grep "Processing.*\.whl" | sed 's/Processing //' | head -1)
          echo "Pip would choose: $WHEEL_PATH"
          echo "CHOSEN_WHEEL_PATH=$WHEEL_PATH" >> $GITHUB_ENV
          
      - name: Install OFRAK wheel
        run: |
          echo "Installing specific wheel: $CHOSEN_WHEEL_PATH"
          pip install "$CHOSEN_WHEEL_PATH"

      - name: Install pytest_ofrak from sdist
        run: |
          pip install dist-pytest-ofrak/*.tar.gz

      - name: Test OFRAK installation
        run: |
          python -c "import ofrak; print('OFRAK import successful')"
          python -c "from ofrak.core.entropy import entropy_c; print('C extension loaded successfully')" || echo "C extension not available, using Python fallback"
#          python -c "from keystone import KS_ARCH_ARM64, KS_ARCH_ARM, KS_ARCH_X86, KS_MODE_THUMB, KS_MODE_ARM, KS_MODE_64, KS_MODE_32, KS_MODE_16, Ks, KsError, KS_ARCH_PPC, KS_MODE_BIG_ENDIAN, KS_MODE_LITTLE_ENDIAN"
      - name: Run basic OFRAK tests (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd ofrak_core
          ofrak license --community --i-agree && make test-wheel
      - name: Run basic OFRAK tests (Windows)
        if: runner.os == 'Windows'
        run: |
          cd ofrak_core
          ofrak license --community --i-agree && make test-wheel PYTHON=python

  build-ofrak-angr-sdist:
    name: build ofrak-angr sdist
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install -r pip-requirements.txt
          pip install build

      - name: Build ofrak-angr source distribution
        run: |
          cd disassemblers/ofrak_angr
          python -m build --sdist --outdir ../../dist-angr

      - name: List built packages
        run: |
          echo "Built ofrak-angr packages:"
          ls -la dist-angr/

      - name: Upload ofrak-angr source distribution
        uses: actions/upload-artifact@v4
        with:
          name: ofrak-angr-sdist
          path: dist-angr/
          retention-days: 30

  test-ofrak-angr:
    name: Test ofrak-angr on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: [build-ofrak-type-sdist, build-ofrak-io-sdist, build-ofrak-patch-maker-sdist, build-ofrak-wheels, build-ofrak-angr-sdist, build-pytest-ofrak-sdist]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Download ofrak_type source distribution
        uses: actions/download-artifact@v4
        with:
          name: ofrak-type-sdist
          path: dist-ofrak-type/

      - name: Download ofrak_io source distribution
        uses: actions/download-artifact@v4
        with:
          name: ofrak-io-sdist
          path: dist-io/

      - name: Download ofrak_patch_maker source distribution
        uses: actions/download-artifact@v4
        with:
          name: ofrak-patch-maker-sdist
          path: dist-patch-maker/

      - name: Download ofrak_angr source distribution
        uses: actions/download-artifact@v4
        with:
          name: ofrak-angr-sdist
          path: dist-angr/

      - name: Download OFRAK wheels
        uses: actions/download-artifact@v4
        with:
          name: ofrak-wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: wheelhouse/

      - name: Download pytest_ofrak source distribution
        uses: actions/download-artifact@v4
        with:
          name: pytest-ofrak-sdist
          path: dist-pytest-ofrak/

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install cmake (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake

      - name: Create virtual environment
        run: |
          python -m venv venv

      - name: Activate virtual environment (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

      - name: Activate virtual environment (Windows)
        if: runner.os == 'Windows'
        run: |
          venv\Scripts\activate
          echo "VIRTUAL_ENV=$env:VIRTUAL_ENV" >> $env:GITHUB_ENV
          echo "$env:VIRTUAL_ENV\Scripts" >> $env:GITHUB_PATH
        shell: pwsh

      - name: Install pinned pip version
        run: |
          python -m pip install -r pip-requirements.txt

      - name: Install development requirements
        run: |
          pip install -r dev-requirements.txt

      - name: Install ofrak_type from sdist
        run: |
          pip install dist-ofrak-type/*.tar.gz

      - name: Install OFRAK IO from sdist
        run: |
          pip install dist-io/*.tar.gz

      - name: Install ofrak-patch-maker from sdist
        run: |
          pip install dist-patch-maker/*.tar.gz

      - name: List available OFRAK wheels
        run: |
          echo "Available wheels in wheelhouse/:"
          ls -la wheelhouse/
          echo ""
          echo "Platform info:"
          python -c "import sysconfig; print(f'Platform: {sysconfig.get_platform()}')"
          python -c "import platform; print(f'Machine: {platform.machine()}')"

      - name: Determine which wheel to install
        run: |
          echo "Contents of wheelhouse:"
          ls -la wheelhouse/
          echo ""
          echo "Testing which wheel pip would choose (local only):"
          WHEEL_PATH=$(pip install --dry-run --find-links wheelhouse/ --no-index --no-deps ofrak 2>&1 | grep "Processing.*\.whl" | sed 's/Processing //' | head -1)
          echo "Pip would choose: $WHEEL_PATH"
          echo "CHOSEN_WHEEL_PATH=$WHEEL_PATH" >> $GITHUB_ENV
          
      - name: Install OFRAK wheel
        run: |
          echo "Installing specific wheel: $CHOSEN_WHEEL_PATH"
          pip install "$CHOSEN_WHEEL_PATH"

      - name: Install ofrak-angr from sdist
        run: |
          pip install dist-angr/*.tar.gz

      - name: Install pytest_ofrak from sdist
        run: |
          pip install dist-pytest-ofrak/*.tar.gz

      - name: Run ofrak-angr tests (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd disassemblers/ofrak_angr
          ofrak license --community --i-agree && make test

      - name: Run ofrak-angr tests (Windows)
        if: runner.os == 'Windows'
        run: |
          cd disassemblers/ofrak_angr
          ofrak license --community --i-agree && make test PYTHON=python
